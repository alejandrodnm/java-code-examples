/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

import org.jooq.meta.jaxb.Logging

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'nu.studer.jooq' version '6.0.1'
    id 'org.flywaydb.flyway' version '8.0.2'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation "org.testcontainers:postgresql:1.16.2"
    testImplementation "org.testcontainers:junit-jupiter:1.16.2"
    testImplementation "org.mock-server:mockserver-netty:5.11.2"
    testImplementation "org.mock-server:mockserver-junit-jupiter:5.11.1"

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.jooq:jooq:3.15.4'
    implementation 'org.jooq:jooq-meta:3.15.4'
    implementation 'org.jooq:jooq-codegen:3.15.4'
    implementation "com.zaxxer:HikariCP:5.0.0"
    implementation "org.postgresql:postgresql:42.3.1"
    implementation "com.google.dagger:dagger:2.40.2"
    implementation "org.flywaydb:flyway-core:${project['flyway.version']}"


    jooqGenerator "org.postgresql:postgresql:42.3.1"
}

application {
    // Define the main class for the application.
    mainClass = 'codeexamples.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jooq {
    version = '3.15.1'  // default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = false  // default (can be omitted)

            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/db_test'
                    user = 'db_admin'
                    password = 'db_password'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'codeexamples.jooq'
                        directory = 'src/generated/jooq/'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/db_test'
    user = 'db_admin'
    password = 'db_password'
    locations = ['classpath:db/migration']
}

flywayMigrate.dependsOn classes
